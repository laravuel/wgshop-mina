<template>
    <view class="carts">
        <repeat for="{{ carts }}" key="id" index="index" item="item">
            <view class="item">
                <view class="item-header">
                    <zan-row>
                        <zan-col col="2">
                            <view class="select zan-c-gray-dark">
                                <zan-icon type="checked"></zan-icon>
                            </view>
                        </zan-col>
                        <zan-col col="16">
                            <view class="title flex-middle">
                                <image src="{{ item.sku && item.sku.thumb ? item.sku.thumb : item.product.thumb }}" />
                                <text>{{ item.product.name }}</text>
                            </view>
                        </zan-col>
                        <zan-col col="6">
                            <view class="price zan-pull-right">
                                <text class="zan-c-gray-dark">{{ item.num }} × </text><text class="zan-font-16 zan-c-red">{{ item.sku ? item.sku.price : item.product.price }}元</text>
                            </view>
                        </zan-col>
                    </zan-row>
                </view>
                <view class="item-main">
                    <zan-row>
                        <zan-col col="10">
                            <view wx:if="{{ item.sku }}" class="name">
                                <text wx:for="{{ item.sku.params }}" wx:for-item="param" wx:key="id">{{ param.param_name }} </text>
                            </view>
                            <view wx:else class="name">
                                <text>无规格</text>
                            </view>
                        </zan-col>
                        <zan-col col="14">
                            <view class="flex-middle cart-num">
                                <zan-stepper stepper="{{ item.num }}" min="1" max="{{ item.sku ? item.sku.stocks : item.product.stocks }}" size="small" bind:change="setNum({{ index }})"></zan-stepper>
                                <view class="delete" @tap="remove({{ index }})"><zan-icon type="delete"></zan-icon></view>
                            </view>
                        </zan-col>
                    </zan-row>
                </view>
            </view>
        </repeat>
        <placeholder :show.sync="isEmpty" message="购物车什么都没有奥~" iconType="custome">
            <zan-icon slot="icon" type="shopping-cart" style="font-size: 50px; color: #999;"></zan-icon>
            <navigator open-type="redirect" url="/pages/index"><zan-button type="primary" style="display: inline-block; margin: 20px;">去商城逛逛</zan-button></navigator>
        </placeholder>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import api from '@/api/api';
    import Placeholder from '@/components/common/placeholder';
    let timer = null;

    export default class Carts extends wepy.page {
        components = {
            placeholder : Placeholder
        };
        config = {
            navigationBarBackgroundColor: '#fff',
            navigationBarTextStyle: 'black',
            usingComponents: {
                "zan-cell": "../../zanUi/cell/index",
                "zan-cell-group": "../../zanUi/cell-group/index",
                "zan-panel": "../../zanUi/panel/index",
                "zan-tab": "../../zanUi/tab/index",
                "zan-row": "../../zanUi/row/index",
                "zan-col": "../../zanUi/col/index",
                "zan-button": "../../zanUi/btn/index",
                "zan-button-group": "../../zanUi/btn-group/index",
                "zan-icon": "../../zanUi/icon/index",
                "zan-popup": "../../zanUi/popup/index",
                "zan-stepper": "../../zanUi/stepper/index",
            },
        };
        data = {
            carts: null,
        };
        onLoad() {
            wepy.setNavigationBarTitle({ title: '购物车' });
        };
        computed = {
            isEmpty() {
                return !this.carts || !this.carts.length;
            }
        };
        async onShow() {
            let res = await api.getCarts({ include: 'product,sku', params: 1 });
            this.carts = res.data.data;
            this.$apply();
        };
        methods = {
            async setNum(index, event) {
                let that = this;
                this.carts[index].num = event.detail;
                await api.updateCart(that.carts[index].id, this.carts[index].num);
            },
            async remove(index) {
                let res = await api.deleteCart(this.carts[index].id);
                if(!res.error) {
                    this.carts.splice(index, 1);
                    this.$apply();
                }
            }
        }
    }
</script>

<style lang="scss" scoped>
    .carts {
        margin: 10px 0;
        .item {
            background: #fafafa;
            border-top: 1px solid #eee;
            .item-header {
                background: #fff;
                padding: 10px 15px;
                .select {
                    height: 40px;
                    line-height: 40px;
                }
                .title {
                    image {
                        width: 30px;
                        height: 40px;
                        margin-right: 10px;
                    }
                }
                .price {
                    line-height: 40px;
                }
            }
            .item-main {
                padding: 15px;
                .cart-num {
                    justify-content: flex-end;
                }
                .name {
                    line-height: 30px;
                }
                .delete {
                    line-height: 30px;
                    width: 30px;
                    border: 1px solid #eee;
                    text-align: center;
                    margin-left: 10px;
                    background: #eee;
                    border-radius: 3px;
                }
            }
        }
    }
</style>
